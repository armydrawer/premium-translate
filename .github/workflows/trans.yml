name: Auto Translate RU -> EN (Preserve Blocks)

on:
  push:
    paths:
      - "ru/**"

jobs:
  translate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          pip install transformers sentencepiece sacremoses pillow pytesseract numpy
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-rus fonts-dejavu

      - name: Create EN folder if missing
        run: mkdir -p en

      - name: Translate Markdown files
        run: |
          python - <<'EOF'
          import os
          from transformers import MarianMTModel, MarianTokenizer

          model_name = "Helsinki-NLP/opus-mt-ru-en"
          tokenizer = MarianTokenizer.from_pretrained(model_name)
          model = MarianMTModel.from_pretrained(model_name)

          def translate_text(text):
              inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
              translated = model.generate(**inputs)
              return tokenizer.decode(translated[0], skip_special_tokens=True)

          for root, _, files in os.walk("ru"):
              for f in files:
                  if f.endswith(".md"):
                      src = os.path.join(root, f)
                      rel = os.path.relpath(src, "ru")
                      tgt = os.path.join("en", rel)
                      os.makedirs(os.path.dirname(tgt), exist_ok=True)

                      text = open(src, encoding="utf-8").read()
                      with open(tgt, "w", encoding="utf-8") as fout:
                          fout.write(translate_text(text))
          EOF

      - name: Translate screenshots (line/paragraph blocks)
        run: |
          python - <<'EOF'
          import os
          import numpy as np
          import pytesseract
          from PIL import Image, ImageDraw, ImageFont
          from transformers import MarianMTModel, MarianTokenizer
          from textwrap import wrap

          model_name = "Helsinki-NLP/opus-mt-ru-en"
          tokenizer = MarianTokenizer.from_pretrained(model_name)
          model = MarianMTModel.from_pretrained(model_name)

          def translate_text(txt):
              if not txt.strip():
                  return ""
              inputs = tokenizer(txt, return_tensors="pt", truncation=True, padding=True)
              translated = model.generate(**inputs)
              return tokenizer.decode(translated[0], skip_special_tokens=True)

          font_regular = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
          font_bold = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"

          def get_contrast_color(img, x, y, w, h):
              region = img.crop((x, y, x+w, y+h))
              arr = np.array(region)
              avg = arr.mean(axis=(0,1))[:3]
              lum = 0.2126*avg[0]+0.7152*avg[1]+0.0722*avg[2]
              return "black" if lum>128 else "white"

          for root, _, files in os.walk("ru/.gitbook/assets"):
              for f in files:
                  if f.endswith(".png"):
                      src = os.path.join(root, f)
                      rel = os.path.relpath(src, "ru")
                      tgt = os.path.join("en", rel)
                      os.makedirs(os.path.dirname(tgt), exist_ok=True)

                      img = Image.open(src).convert("RGB")
                      data = pytesseract.image_to_data(img, lang="rus", output_type=pytesseract.Output.DICT)

                      draw = ImageDraw.Draw(img)

                      # группируем по строкам (line_num)
                      line_map = {}
                      for i, word in enumerate(data["text"]):
                          if word.strip():
                              key = (data["block_num"][i], data["par_num"][i], data["line_num"][i])
                              bbox = (data["left"][i], data["top"][i], data["width"][i], data["height"][i])
                              if key not in line_map:
                                  line_map[key] = {"words": [], "boxes": []}
                              line_map[key]["words"].append(word)
                              line_map[key]["boxes"].append(bbox)

                      for key, val in line_map.items():
                          text_ru = " ".join(val["words"])
                          text_en = translate_text(text_ru)

                          xs = [b[0] for b in val["boxes"]]
                          ys = [b[1] for b in val["boxes"]]
                          ws = [b[2] for b in val["boxes"]]
                          hs = [b[3] for b in val["boxes"]]

                          x, y = min(xs), min(ys)
                          w, h = max([x+w for x,w in zip(xs,ws)])-x, max([y+h for y,h in zip(ys,hs)])-y

                          # стираем область
                          draw.rectangle([(x,y),(x+w,y+h)], fill="white")

                          # выбираем шрифт
                          font = ImageFont.truetype(font_bold if len(text_ru)<15 else font_regular, size=max(14,int(h*0.8)))

                          # перенос строк
                          max_chars = max(10, w // (font.getsize("A")[0]))
                          wrapped = wrap(text_en, width=max_chars)

                          # рисуем перевод построчно
                          text_color = get_contrast_color(img,x,y,w,h)
                          ty = y
                          for line in wrapped:
                              tw, th = draw.textsize(line, font=font)
                              tx = x + (w - tw)//2
                              draw.text((tx,ty), line, font=font, fill=text_color)
                              ty += th

                      img.save(tgt)
          EOF

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add en
          git commit -m "Auto-translate RU -> EN with paragraph-preserved screenshots [skip ci]" || echo "No changes"
          git push
