#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö JSON —Ñ–∞–π–ª–æ–≤
–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç markdown —Ñ–∞–π–ª—ã —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
"""

import os
import json
import yaml
import frontmatter
import re
from pathlib import Path


def load_translations():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"""
    
    translations = {}
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON
    json_path = Path('translations/en/documentation.json')
    if json_path.exists():
        with open(json_path, 'r', encoding='utf-8') as f:
            translations.update(json.load(f))
        print(f"üì• Loaded {len(translations)} translations from JSON")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å YAML –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    yaml_path = Path('translations/en/docs-content.yml')
    if yaml_path.exists():
        with open(yaml_path, 'r', encoding='utf-8') as f:
            yaml_translations = yaml.safe_load(f)
            translations.update(yaml_translations)
        print(f"üì• Loaded additional translations from YAML")
    
    return translations


def load_file_structure():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    structure_path = Path('translations/files-structure.json')
    if not structure_path.exists():
        print("‚ùå File structure not found! Run extract-content.py first.")
        return {}
    
    with open(structure_path, 'r', encoding='utf-8') as f:
        return json.load(f)


def rebuild_markdown_file(original_file, translations, file_structure):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç markdown —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    with open(original_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü–∞—Ä—Å–∏–º frontmatter
    post = frontmatter.loads(content)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ñ–∞–π–ª–∞
    relative_path = Path(original_file).relative_to('ru')
    file_key = str(relative_path).replace('/', '_').replace('.md', '')
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º frontmatter
    translated_frontmatter = post.metadata.copy()
    frontmatter_fields = ['title', 'description', 'summary', 'excerpt']
    
    for field in frontmatter_fields:
        if field in translated_frontmatter:
            translation_key = f"{file_key}_frontmatter_{field}"
            if translation_key in translations:
                translated_frontmatter[field] = translations[translation_key]
                print(f"  üìù Translated {field}: {translations[translation_key][:50]}...")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç
    translated_content = translate_content_blocks(post.content, file_key, translations)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π markdown —Ñ–∞–π–ª
    new_post = frontmatter.Post(translated_content, **translated_frontmatter)
    
    return frontmatter.dumps(new_post)


def translate_content_blocks(content, file_key, translations):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –±–ª–æ–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ extract-content.py
    sections = re.split(r'(^#{1,6}\s+.*$)', content, flags=re.MULTILINE)
    
    translated_sections = []
    block_id = 0
    
    for section in sections:
        section = section.strip()
        if not section:
            continue
        
        if re.match(r'^#{1,6}\s+', section):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            translation_key = f"{file_key}_block_{block_id}"
            if translation_key in translations:
                translated_sections.append(translations[translation_key])
                print(f"  üìç Translated heading: {translations[translation_key]}")
            else:
                translated_sections.append(section)
            block_id += 1
        else:
            # –û–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
            paragraphs = [p.strip() for p in section.split('\n\n') if p.strip()]
            translated_paragraphs = []
            
            for paragraph in paragraphs:
                translation_key = f"{file_key}_block_{block_id}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–π –±–ª–æ–∫
                if (not paragraph.startswith('```') and 
                    not paragraph.startswith('    ') and 
                    not re.match(r'^!\[.*\]\(.*\)$', paragraph.strip())):
                    
                    if translation_key in translations:
                        translated_paragraph = translations[translation_key]
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                        translated_paragraph = update_
